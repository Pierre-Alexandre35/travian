import { useEffect, useRef } from 'react';
import { useFormState } from 'react-final-form';
import { useHistory } from 'react-router-dom';
import { useTranslate } from '../i18n';
/**
 * Display a confirmation dialog if the form has unsaved changes.
 * - If the user confirms, the navigation continues and the changes are lost.
 * - If the user cancels, the navigation is cancelled and the changes are kept.
 */
var useWarnWhenUnsavedChanges = function (enable, formRootPathname) {
    var history = useHistory();
    var translate = useTranslate();
    var _a = useFormState(UseFormStateSubscription), pristine = _a.pristine, submitSucceeded = _a.submitSucceeded, submitting = _a.submitting;
    var initialLocation = useRef(formRootPathname || history.location.pathname);
    useEffect(function () {
        if (!enable) {
            return;
        }
        var release = history.block(function (location) {
            var isInsideForm = location.pathname.startsWith(initialLocation.current);
            if (!pristine && !isInsideForm && !submitSucceeded && !submitting) {
                return translate('ra.message.unsaved_changes');
            }
            return undefined;
        });
        return function () {
            if (release) {
                release();
            }
        };
    }, [pristine, enable, history, translate, submitSucceeded, submitting]);
};
var UseFormStateSubscription = {
    // For some reason, subscribing only to pristine does not rerender when a field become dirty
    // because it has a defaultValue (not initialValue as setting an initialValue does not make the field dirty)
    subscription: {
        pristine: true,
        dirtyFields: true,
        submitSucceeded: true,
        submitting: true,
    },
};
export default useWarnWhenUnsavedChanges;
