var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Children, cloneElement, memo } from 'react';
import PropTypes from 'prop-types';
import { AppBar as MuiAppBar, Toolbar, Typography, useMediaQuery, } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import { ComponentPropType } from 'ra-core';
import { SidebarToggleButton } from './SidebarToggleButton';
import LoadingIndicator from './LoadingIndicator';
import DefaultUserMenu from './UserMenu';
import HideOnScroll from './HideOnScroll';
/**
 * The AppBar component renders a custom MuiAppBar.
 *
 * @param {Object} props
 * @param {ReactNode} props.children React node/s to be render as children of the AppBar
 * @param {Object} props.classes CSS class names
 * @param {string} props.className CSS class applied to the MuiAppBar component
 * @param {string} props.color The color of the AppBar
 * @param {Component} props.logout The logout button component that will be pass to the UserMenu component
 * @param {boolean} props.open State of the <Admin/> Sidebar
 * @param {Element | boolean} props.userMenu A custom user menu component for the AppBar. <UserMenu/> component by default. Pass false to disable.
 *
 * @example
 *
 * const MyAppBar = props => {
 *   const classes = useStyles();
 *   return (
 *       <AppBar {...props}>
 *           <Typography
 *               variant="h6"
 *               color="inherit"
 *               className={classes.title}
 *               id="react-admin-title"
 *           />
 *       </AppBar>
 *   );
 *};
 *
 * @example Without a user menu
 *
 * const MyAppBar = props => {
 *   const classes = useStyles();
 *   return (
 *       <AppBar {...props} userMenu={false} />
 *   );
 *};
 */
var AppBar = function (props) {
    var children = props.children, classesOverride = props.classes, className = props.className, _a = props.color, color = _a === void 0 ? 'secondary' : _a, logout = props.logout, open = props.open, title = props.title, userMenu = props.userMenu, Container = props.container, rest = __rest(props, ["children", "classes", "className", "color", "logout", "open", "title", "userMenu", "container"]);
    var classes = useStyles(props);
    var sidebarToggleButtonClasses = {
        menuButtonIconClosed: classes.menuButtonIconClosed,
        menuButtonIconOpen: classes.menuButtonIconOpen,
    };
    var isXSmall = useMediaQuery(function (theme) {
        return theme.breakpoints.down('xs');
    });
    return (React.createElement(Container, null,
        React.createElement(MuiAppBar, __assign({ className: className, color: color }, rest),
            React.createElement(Toolbar, { disableGutters: true, variant: isXSmall ? 'regular' : 'dense', className: classes.toolbar },
                React.createElement(SidebarToggleButton, { className: classes.menuButton, classes: sidebarToggleButtonClasses }),
                Children.count(children) === 0 ? (React.createElement(Typography, { variant: "h6", color: "inherit", className: classes.title, id: "react-admin-title" })) : (children),
                React.createElement(LoadingIndicator, null),
                typeof userMenu === 'boolean' ? (userMenu === true ? (React.createElement(DefaultUserMenu, { logout: logout })) : null) : (cloneElement(userMenu, { logout: logout }))))));
};
AppBar.propTypes = {
    children: PropTypes.node,
    // @ts-ignore
    classes: PropTypes.object,
    className: PropTypes.string,
    color: PropTypes.oneOf([
        'default',
        'inherit',
        'primary',
        'secondary',
        'transparent',
    ]),
    container: ComponentPropType,
    logout: PropTypes.element,
    // @deprecated
    open: PropTypes.bool,
    userMenu: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),
};
AppBar.defaultProps = {
    userMenu: React.createElement(DefaultUserMenu, null),
    container: HideOnScroll,
};
var useStyles = makeStyles(function (theme) { return ({
    toolbar: {
        paddingRight: 24,
    },
    menuButton: {
        marginLeft: '0.2em',
        marginRight: '0.2em',
    },
    menuButtonIconClosed: {},
    menuButtonIconOpen: {},
    title: {
        flex: 1,
        textOverflow: 'ellipsis',
        whiteSpace: 'nowrap',
        overflow: 'hidden',
    },
}); }, { name: 'RaAppBar' });
export default memo(AppBar);
