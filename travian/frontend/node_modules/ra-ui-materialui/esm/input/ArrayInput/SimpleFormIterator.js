var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { cloneElement, useCallback, useMemo, useRef, } from 'react';
import { FormHelperText } from '@material-ui/core';
import classNames from 'classnames';
import get from 'lodash/get';
import PropTypes from 'prop-types';
import { ValidationError } from 'ra-core';
import { CSSTransition, TransitionGroup } from 'react-transition-group';
import { useArrayInput } from './useArrayInput';
import { useSimpleFormIteratorStyles } from './useSimpleFormIteratorStyles';
import { SimpleFormIteratorContext } from './SimpleFormIteratorContext';
import { SimpleFormIteratorItem, } from './SimpleFormIteratorItem';
import { AddItemButton as DefaultAddItemButton } from './AddItemButton';
import { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';
import { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';
export var SimpleFormIterator = function (props) {
    var _a = props.addButton, addButton = _a === void 0 ? React.createElement(DefaultAddItemButton, null) : _a, _b = props.removeButton, removeButton = _b === void 0 ? React.createElement(DefaultRemoveItemButton, null) : _b, _c = props.reOrderButtons, reOrderButtons = _c === void 0 ? React.createElement(DefaultReOrderButtons, null) : _c, basePath = props.basePath, children = props.children, className = props.className, record = props.record, resource = props.resource, source = props.source, disabled = props.disabled, disableAdd = props.disableAdd, disableRemove = props.disableRemove, disableReordering = props.disableReordering, variant = props.variant, margin = props.margin, TransitionProps = props.TransitionProps, defaultValue = props.defaultValue, _d = props.getItemLabel, getItemLabel = _d === void 0 ? DefaultLabelFn : _d;
    var classes = useSimpleFormIteratorStyles(props);
    var _e = useArrayInput(props), fields = _e.fields, meta = _e.meta;
    var error = meta.error, submitFailed = meta.submitFailed;
    var nodeRef = useRef(null);
    // We need a unique id for each field for a proper enter/exit animation
    // so we keep an internal map between the field position and an auto-increment id
    var nextId = useRef(fields && fields.length
        ? fields.length
        : defaultValue
            ? defaultValue.length
            : 0);
    // We check whether we have a defaultValue (which must be an array) before checking
    // the fields prop which will always be empty for a new record.
    // Without it, our ids wouldn't match the default value and we would get key warnings
    // on the CssTransition element inside our render method
    var ids = useRef(nextId.current > 0 ? Array.from(Array(nextId.current).keys()) : []);
    var removeField = useCallback(function (index) {
        ids.current.splice(index, 1);
        fields.remove(index);
    }, [fields]);
    var addField = useCallback(function (item) {
        if (item === void 0) { item = undefined; }
        ids.current.push(nextId.current++);
        fields.push(item);
    }, [fields]);
    // add field and call the onClick event of the button passed as addButton prop
    var handleAddButtonClick = function (originalOnClickHandler) { return function (event) {
        addField();
        if (originalOnClickHandler) {
            originalOnClickHandler(event);
        }
    }; };
    var handleReorder = useCallback(function (origin, destination) {
        var item = ids.current[origin];
        ids.current[origin] = ids.current[destination];
        ids.current[destination] = item;
        fields.move(origin, destination);
    }, [fields]);
    var records = get(record, source);
    var context = useMemo(function () { return ({
        total: fields.length,
        add: addField,
        remove: removeField,
        reOrder: handleReorder,
    }); }, [fields.length, addField, removeField, handleReorder]);
    return fields ? (React.createElement(SimpleFormIteratorContext.Provider, { value: context },
        React.createElement("ul", { className: classNames(classes.root, className) },
            submitFailed && typeof error !== 'object' && error && (React.createElement(FormHelperText, { error: true },
                React.createElement(ValidationError, { error: error }))),
            React.createElement(TransitionGroup, { component: null }, fields.map(function (member, index) { return (React.createElement(CSSTransition, __assign({ nodeRef: nodeRef, key: index, timeout: 500, classNames: "fade" }, TransitionProps),
                React.createElement(SimpleFormIteratorItem, { basePath: basePath, classes: classes, disabled: disabled, disableRemove: disableRemove, disableReordering: disableReordering, fields: fields, getItemLabel: getItemLabel, index: index, margin: margin, member: member, meta: meta, onRemoveField: removeField, onReorder: handleReorder, record: (records && records[index]) || {}, removeButton: removeButton, reOrderButtons: reOrderButtons, resource: resource, source: source, variant: variant, ref: nodeRef }, children))); })),
            !disabled && !disableAdd && (React.createElement("li", { className: classes.line },
                React.createElement("span", { className: classes.action }, cloneElement(addButton, {
                    onClick: handleAddButtonClick(addButton.props.onClick),
                    className: classNames('button-add', "button-add-" + source),
                }))))))) : null;
};
SimpleFormIterator.defaultProps = {
    disableAdd: false,
    disableRemove: false,
};
SimpleFormIterator.propTypes = {
    defaultValue: PropTypes.any,
    addButton: PropTypes.element,
    removeButton: PropTypes.element,
    basePath: PropTypes.string,
    children: PropTypes.node,
    classes: PropTypes.object,
    className: PropTypes.string,
    // @ts-ignore
    fields: PropTypes.object,
    meta: PropTypes.object,
    // @ts-ignore
    record: PropTypes.object,
    source: PropTypes.string,
    resource: PropTypes.string,
    translate: PropTypes.func,
    disableAdd: PropTypes.bool,
    disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
    TransitionProps: PropTypes.shape({}),
};
var DefaultLabelFn = function (index) { return index + 1; };
