import * as React from 'react';
import { ReactElement, ReactNode } from 'react';
import { Record } from 'ra-core';
import { ClassesOverride } from '../../types';
import { useSimpleFormIteratorStyles } from './useSimpleFormIteratorStyles';
import { ArrayInputContextValue } from './ArrayInputContext';
export declare const SimpleFormIteratorItem: React.ForwardRefExoticComponent<ArrayInputContextValue & {
    basePath: string;
    children?: ReactNode;
    classes?: ClassesOverride<typeof useSimpleFormIteratorStyles>;
    disabled?: boolean;
    disableRemove?: boolean | DisableRemoveFunction;
    disableReordering?: boolean;
    getItemLabel?: (index: number) => string;
    index: number;
    margin?: 'none' | 'normal' | 'dense';
    member: string;
    onRemoveField: (index: number) => void;
    onReorder: (origin: number, destination: number) => void;
    record: Record;
    removeButton?: ReactElement;
    reOrderButtons?: ReactElement;
    resource: string;
    source: string;
    variant?: 'standard' | 'outlined' | 'filled';
} & React.RefAttributes<unknown>>;
export declare type DisableRemoveFunction = (record: Record) => boolean;
export declare type SimpleFormIteratorItemProps = ArrayInputContextValue & {
    basePath: string;
    children?: ReactNode;
    classes?: ClassesOverride<typeof useSimpleFormIteratorStyles>;
    disabled?: boolean;
    disableRemove?: boolean | DisableRemoveFunction;
    disableReordering?: boolean;
    getItemLabel?: (index: number) => string;
    index: number;
    margin?: 'none' | 'normal' | 'dense';
    member: string;
    onRemoveField: (index: number) => void;
    onReorder: (origin: number, destination: number) => void;
    record: Record;
    removeButton?: ReactElement;
    reOrderButtons?: ReactElement;
    resource: string;
    source: string;
    variant?: 'standard' | 'outlined' | 'filled';
};
//# sourceMappingURL=SimpleFormIteratorItem.d.ts.map