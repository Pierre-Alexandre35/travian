var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Children, cloneElement } from 'react';
import PropTypes from 'prop-types';
import { useInput, useReferenceInputController, warning as warningLog, ListContextProvider, ResourceContextProvider, } from 'ra-core';
import sanitizeInputRestProps from './sanitizeInputRestProps';
import ReferenceError from './ReferenceError';
/**
 * An Input component for choosing a reference record. Useful for foreign keys.
 *
 * This component fetches the possible values in the reference resource
 * (using `dataProvider.getList()`), then delegates rendering
 * to a subcomponent, to which it passes the possible choices
 * as the `choices` attribute.
 *
 * Use it with a selector component as child, like `<AutocompleteInput>`,
 * `<SelectInput>`, or `<RadioButtonGroupInput>`.
 *
 * @example
 * export const CommentEdit = (props) => (
 *     <Edit {...props}>
 *         <SimpleForm>
 *             <ReferenceInput label="Post" source="post_id" reference="posts">
 *                 <AutocompleteInput optionText="title" />
 *             </ReferenceInput>
 *         </SimpleForm>
 *     </Edit>
 * );
 *
 * @example
 * export const CommentEdit = (props) => (
 *     <Edit {...props}>
 *         <SimpleForm>
 *             <ReferenceInput label="Post" source="post_id" reference="posts">
 *                 <SelectInput optionText="title" />
 *             </ReferenceInput>
 *         </SimpleForm>
 *     </Edit>
 * );
 *
 * By default, restricts the possible values to 25. You can extend this limit
 * by setting the `perPage` prop.
 *
 * @example
 * <ReferenceInput
 *      source="post_id"
 *      reference="posts"
 *      perPage={100}>
 *     <SelectInput optionText="title" />
 * </ReferenceInput>
 *
 * By default, orders the possible values by id desc. You can change this order
 * by setting the `sort` prop (an object with `field` and `order` properties).
 *
 * @example
 * <ReferenceInput
 *      source="post_id"
 *      reference="posts"
 *      sort={{ field: 'title', order: 'ASC' }}>
 *     <SelectInput optionText="title" />
 * </ReferenceInput>
 *
 * Also, you can filter the query used to populate the possible values. Use the
 * `filter` prop for that.
 *
 * @example
 * <ReferenceInput
 *      source="post_id"
 *      reference="posts"
 *      filter={{ is_published: true }}>
 *     <SelectInput optionText="title" />
 * </ReferenceInput>
 *
 * The enclosed component may filter results. ReferenceInput passes a `setFilter`
 * function as prop to its child component. It uses the value to create a filter
 * for the query - by default { q: [searchText] }. You can customize the mapping
 * searchText => searchQuery by setting a custom `filterToQuery` function prop:
 *
 * @example
 * <ReferenceInput
 *      source="post_id"
 *      reference="posts"
 *      filterToQuery={searchText => ({ title: searchText })}>
 *     <AutocompleteInput optionText="title" />
 * </ReferenceInput>
 */
var ReferenceInput = function (props) {
    var format = props.format, onBlur = props.onBlur, onChange = props.onChange, onFocus = props.onFocus, parse = props.parse, validate = props.validate, rest = __rest(props, ["format", "onBlur", "onChange", "onFocus", "parse", "validate"]);
    var inputProps = useInput(__assign({ format: format, onBlur: onBlur, onChange: onChange, onFocus: onFocus, parse: parse, validate: validate }, rest));
    return (React.createElement(ReferenceInputView, __assign({}, inputProps, rest, useReferenceInputController(__assign(__assign({}, rest), inputProps)))));
};
ReferenceInput.propTypes = {
    allowEmpty: PropTypes.bool,
    basePath: PropTypes.string,
    children: PropTypes.element.isRequired,
    className: PropTypes.string,
    classes: PropTypes.object,
    filter: PropTypes.object,
    filterToQuery: PropTypes.func.isRequired,
    label: PropTypes.string,
    onChange: PropTypes.func,
    perPage: PropTypes.number,
    record: PropTypes.object,
    reference: PropTypes.string.isRequired,
    resource: PropTypes.string,
    sort: PropTypes.shape({
        field: PropTypes.string,
        order: PropTypes.oneOf(['ASC', 'DESC']),
    }),
    source: PropTypes.string,
};
ReferenceInput.defaultProps = {
    filter: {},
    filterToQuery: function (searchText) { return (searchText ? { q: searchText } : {}); },
    perPage: 25,
    sort: { field: 'id', order: 'DESC' },
};
var sanitizeRestProps = function (_a) {
    var _b = _a.dataStatus, dataStatus = _b === void 0 ? null : _b, _c = _a.enableGetChoices, enableGetChoices = _c === void 0 ? null : _c, _d = _a.filter, filter = _d === void 0 ? null : _d, _e = _a.filterToQuery, filterToQuery = _e === void 0 ? null : _e, _f = _a.onChange, onChange = _f === void 0 ? null : _f, _g = _a.perPage, perPage = _g === void 0 ? null : _g, _h = _a.reference, reference = _h === void 0 ? null : _h, _j = _a.referenceRecord, referenceRecord = _j === void 0 ? null : _j, _k = _a.referenceSource, referenceSource = _k === void 0 ? null : _k, _l = _a.sort, sort = _l === void 0 ? null : _l, _m = _a.validation, validation = _m === void 0 ? null : _m, rest = __rest(_a, ["dataStatus", "enableGetChoices", "filter", "filterToQuery", "onChange", "perPage", "reference", "referenceRecord", "referenceSource", "sort", "validation"]);
    return sanitizeInputRestProps(rest);
};
export var ReferenceInputView = function (props) {
    var allowEmpty = props.allowEmpty, basePath = props.basePath, children = props.children, choices = props.choices, classes = props.classes, className = props.className, error = props.error, helperText = props.helperText, id = props.id, input = props.input, isRequired = props.isRequired, label = props.label, meta = props.meta, possibleValues = props.possibleValues, resource = props.resource, reference = props.reference, setFilter = props.setFilter, setPagination = props.setPagination, setSort = props.setSort, source = props.source, warning = props.warning, rest = __rest(props, ["allowEmpty", "basePath", "children", "choices", "classes", "className", "error", "helperText", "id", "input", "isRequired", "label", "meta", "possibleValues", "resource", "reference", "setFilter", "setPagination", "setSort", "source", "warning"]);
    if (Children.count(children) !== 1) {
        throw new Error('<ReferenceInput> only accepts a single child');
    }
    // This is not a final-form error but an unrecoverable error from the
    // useReferenceInputController hook
    if (error) {
        return React.createElement(ReferenceError, { label: label, error: error });
    }
    // When the useReferenceInputController returns a warning, it means it
    // had an issue trying to load the referenced record
    // We display it by overriding the final-form meta
    var finalMeta = warning
        ? __assign(__assign({}, meta), { error: warning }) : meta;
    // helperText should never be set on ReferenceInput, only in child component
    // But in a Filter component, the child helperText have to be forced to false
    warningLog(helperText !== undefined && helperText !== false, "<ReferenceInput> doesn't accept a helperText prop. Set the helperText prop on the child component instead");
    var disabledHelperText = helperText === false ? { helperText: helperText } : {};
    return (React.createElement(ResourceContextProvider, { value: reference },
        React.createElement(ListContextProvider, { value: possibleValues }, cloneElement(children, __assign(__assign({ allowEmpty: allowEmpty, classes: classes, className: className, input: input, isRequired: isRequired, label: label, resource: resource, meta: finalMeta, source: source, choices: choices, basePath: basePath, setFilter: setFilter, setPagination: setPagination, setSort: setSort, translateChoice: false }, disabledHelperText), sanitizeRestProps(rest))))));
};
export default ReferenceInput;
